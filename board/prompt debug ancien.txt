### üß† Prompt Codex ‚Äì Debug s√©quenceur (version pr√™te √† copier)

> Tu es un assistant technique sp√©cialis√© en firmware temps r√©el et architecture logicielle embarqu√©e.
>
> Contexte : le projet est un s√©quenceur mat√©riel complet tournant sous **ChibiOS** sur **STM32F429**, avec une architecture proprement modulaire (UI, Core, Sequencer, MIDI, Cart, Drivers). Le d√©p√¥t contient notamment :
>
> * `README.md` et `ARCHITECTURE_FR.md` d√©crivant l‚Äô√©tat actuel et les objectifs,
> * `SEQ_BEHAVIOR.md` d√©taillant le comportement attendu du s√©quenceur.
>
> Tu dois **corriger et stabiliser le s√©quenceur** en suivant les points suivants :
>
> ---
>
> ### üéØ Objectifs de debug
>
> 1. **Mode Step classique (Quick-Step) instable :**
>
>    * Si on place deux quick-steps cons√©cutifs, le **deuxi√®me ne se joue pas**.
>    * Corrige la logique d‚Äôenregistrement / ex√©cution pour que **toutes les notes de pas cons√©cutifs se jouent normalement**.
>    * L‚Äôorigine probable est une **mauvaise gestion du mode Quick-Step** qui pollue la s√©quence interne (mauvais √©tat ou timing).
> 2. **Mode Rec Live :**
>
>    * Lorsqu‚Äôun pas est vide (aucune note enregistr√©e) et qu‚Äôon rejoue par-dessus, **le s√©quenceur cr√©e parfois automatiquement une note parasite** sur ce pas.
>    * Corrige pour que **rien ne soit √©crit** si aucune note n‚Äôest r√©ellement jou√©e.
>    * Hypoth√®se : bug li√© √† une mauvaise initialisation ou propagation d‚Äô√©tat de note entre frames.
> 3. **Gestion multi-tracks :**
>
>    * Le **mode Track** est bien impl√©ment√©, mais lorsqu‚Äôon change de ‚Äútrack active‚Äù, la **seconde track devient muette**, alors qu‚Äôelle doit continuer √† jouer en parall√®le (comme un vrai s√©quenceur).
>    * Le changement de track active **ne doit pas arr√™ter les autres**, seul le **mute** doit les rendre silencieuses.
>    * Investiguer la cause possible :
>
>      * Peut-√™tre li√©e au fait que sur la spec `cart`, le `xva1` n‚Äôa qu‚Äôune seule track, et ici on en a deux.
>      * V√©rifier si la ‚Äúsp√©cification cartouche‚Äù annonce 2 tracks par erreur, ou si la gestion dynamique des tracks est mal synchronis√©e.
>      * Si ce n‚Äôest pas √ßa, creuser la logique du `sequencer engine` ou `track manager`.
>
> ---
>
> ### ‚öôÔ∏è Contraintes
>
> * Le code doit **compiler sans erreur** avant envoi.
> * Il doit **garder la coh√©rence avec l‚Äô√©tat actuel du projet** d√©crit dans `README.md` et `ARCHITECTURE_FR.md`.
> * Ces deux fichiers doivent √™tre **mis √† jour automatiquement √† la fin** pour refl√©ter les modifications (par ex. sections ‚ÄúKnown issues‚Äù, ‚ÄúAudio engine roadmap‚Äù, ‚ÄúS√©quenceur corrig√©‚Äù).
> * **Ne pas inventer de fichiers ni modifier la structure du projet** ‚Äî tout doit se baser sur ce qui existe.
> * Respecter les conventions de style et de nommage actuelles du projet.
> * Ne pas injecter de code inutile : se limiter aux corrections n√©cessaires.
> * **Ne pas inclure de code ou de structure invent√©e dans ta r√©ponse**, mais appliquer les changements directement dans le d√©p√¥t.
>
> ---
>
> ### üß© R√©f√©rences √† lire avant de coder
>
> * `README.md` ‚Äî √©tat actuel et objectif g√©n√©ral.
> * `ARCHITECTURE_FR.md` ‚Äî logique modulaire (UI / Sequencer / Carts / MIDI / Threads).
> * `SEQ_BEHAVIOR.md` ‚Äî comportement attendu du s√©quenceur en mode step, live, quick-step, track, etc.
>
> ---
>
> ### ‚úÖ R√©sultat attendu
>
> * Le s√©quenceur est **stabilis√©** :
>
>   * Quick-Step fonctionne m√™me sur des pas cons√©cutifs.
>   * Enregistrement Live ne cr√©e pas de note fant√¥me.
>   * Changer de track active **n‚Äôinterrompt plus** les autres tracks.
> * Le projet **compile sans erreur**.
> * Les fichiers **README.md** et **ARCHITECTURE_FR.md** sont mis √† jour pour refl√©ter les corrections apport√©es.
>
> Fournis ensuite le code corrig√©, les commits logiques correspondants et les deux fichiers docs mis √† jour √† la fin.